[null,{"sourceText":"\no = {t:11,children:[\n  {t:111},\n  {t:20,children:[\n    {t:21,children:[{t:25}]}\n  ]\n  },\n  {t:333}\n]}\n\nfunction* dfs (root) {\n  yield root;\n  if(root.children)\n  for (const child of root.children)\n    yield* dfs(child);\n}\n\n\narr = [];\n\nfor (let node of dfs(o)) {\n  arr.push(node)\n}\n\n\narr.map(v=>v.t)\n\n\n\nttt = dfs(o)\n\n;[...ttt].map(v=>v.t)\n_forceJKid = 20\n"},null,{"sourceText":"id=(v)=>'goto:'+v;\nmove=(v)=>'move:'+v;\nset=(v)=>'set:'+v;\nadd=(v)=>({add:v});\nkey=(v)=>'key:'+v;\nfind=(v)=>'find:'+v;\nrun=(v)=>'run:'+v;\n\n\ntodo = [\n  id('menu'),\n  move('right'),\n  add({text:'AAA'}),\n  \n]\n\n\np={x:0,y:0};\nzeroPointData = {}\n\n\ncp = zeroPointData;\n\nzeroPoint = {\n  id:(id)=>cp.id = id,\n  move:dir=>{let o = {}; cp[dir]=o; cp = o}\n}\n\nzeroPoint.id('A')\nzeroPoint.move('r')\nzeroPoint.id('B')\nzeroPoint.move('r')\nzeroPoint.id('C')\nzeroPoint.move('r')\nzeroPoint.id('D')\n\n\nzeroPointData"},{"sourceText":"if(!window.Gun) Gun = require('gun/gun');\nHOST = \"http://localhost:5050/gun\";\nif(!window.gun) gun = Gun(HOST);\n\nmScheme = {\n  '1':{\n    '0':{\n      source:'console.log(\"TEST 1 M FUNCTION\")'\n    },\n    '1':{\n      source:'console.log(\"TEST 2 M FUNCTION\")'\n    }\n  }\n}\n\nmf = ((x,y)=>({x,y,\n  source:'console.log(\"N'+ n++ +'_E_T '+x+' '+y+' M FUNCTION\")',\n}))//(15,0)\n\n\ncode = ()=>'console.log(\"N'+ n++ +' M FUNCTION\")'\n\n\n//cursor = gun.get('matrix').get('byName').get('ui-alpha').get('scheme')\n//cursor = gun.get('matrix').get('byName').get('ui-beta').get('name').put('ui-beta')\ncursor = gun.get('sources').get('byName').get('fn1-alpha').get('source')\n\n\n\ncursor.put(code())\n//cursor.get(mf.x).get(mf.y).put(mf)\n//cursor.get('n').put(1)\n//gun.get('matrix').get('ui').get('matrix_functions').put(null)\n\n\n\n\n\n\n\n\n\n\n"},{"sourceText":"function htmlEncode( html ) {\n    return document.createElement( 'a' ).appendChild( \n        document.createTextNode( html ) ).parentNode.innerHTML;\n};\n\narr = JSON.parse(localStorage.Knows).filter(d=>d && d.sourceText)\narr.map((d,k)=>`<h1>---${k}------------------------------------------</h1> \n\\n <pre>${_.escape(d.sourceText)}</pre>`).join('\\n')\n\n"},{"sourceText":"isresultHTML=1\nfunction htmlEncode( html ) {\n  return document.createElement( 'a' ).appendChild( \n    document.createTextNode( html ) ).parentNode.innerHTML;\n};\n\narr = JSON.parse(localStorage.Knows)\n  .map((v,i)=>v?{...v,i}:{i})\n  .filter(d=>d && d.sourceText);\n\n\narr.map((d,k)=>\n        `<h3>---${d.i}------------------------------------------</h3>\n  <pre style=\"overflow:none;height:200px;\">${_.escape(d.sourceText)}</pre>`\n       ).join('\\n')\n\n"},{"sourceText":"cols = [{\"name\":\"1731D-24-02\",\"label\":\"label1\",\"label_name\":\"Rerere\"},{\"name\":\"saliva_SRS015055.fasta\",\"label\":\"label1\",\"label_name\":\"Rerere\"},{\"name\":\"SRR2005538_merged.fastq.gz\",\"label\":\"label1\",\"label_name\":\"Rerere\"},{\"name\":\"SRR2005673_merged.fastq.gz\",\"label\":\"label1\",\"label_name\":\"Rerere\"},{\"name\":\"sup_plaq_SRS015378.fasta\",\"label\":\"label2\",\"label_name\":\"After-Alpha\"},{\"name\":\"throat_SRS019027.fasta\",\"label\":\"label2\",\"label_name\":\"After-Alpha\"},{\"name\":\"tongue_SRS045127.fasta\",\"label\":\"label2\",\"label_name\":\"After-Alpha\"},{\"name\":\"vag_intr_SRS015071.fasta\",\"label\":\"label2\",\"label_name\":\"After-Alpha\"},{\"name\":\"stool_SRS019582.fasta\",\"label\":\"label3\",\"label_name\":\"After-Beta\"},{\"name\":\"sub_plaq_SRS015064.fasta\",\"label\":\"label3\",\"label_name\":\"After-Beta\"},{\"name\":\"throat_SRS013948.fasta\",\"label\":\"label3\",\"label_name\":\"After-Beta\"},{\"name\":\"tongue_SRS013818.fasta\",\"label\":\"label3\",\"label_name\":\"After-Beta\"},{\"name\":\"pal_ton_SRS013947.fasta\",\"label\":\"label4\",\"label_name\":\"After-Gamma\"},{\"name\":\"saliva_SRS014468.fasta\",\"label\":\"label4\",\"label_name\":\"After-Gamma\"},{\"name\":\"stool_SRS014459.fasta\",\"label\":\"label4\",\"label_name\":\"After-Gamma\"},{\"name\":\"sub_plaq_SRS014107.fasta\",\"label\":\"label4\",\"label_name\":\"After-Gamma\"},{\"name\":\"pal_ton_SRS019026.fasta\",\"label\":\"label5\",\"label_name\":\"Before-Gamma\"},{\"name\":\"saliva_SRS014692.fasta\",\"label\":\"label5\",\"label_name\":\"Before-Gamma\"},{\"name\":\"stool_SRS016056.fasta\",\"label\":\"label5\",\"label_name\":\"Before-Gamma\"},{\"name\":\"sub_plaq_SRS014477.fasta\",\"label\":\"label5\",\"label_name\":\"Before-Gamma\"},{\"name\":\"sup_plaq_SRS019333.fasta\",\"label\":\"label6\",\"label_name\":\"Before-Alpha\"},{\"name\":\"throat_SRS019127.fasta\",\"label\":\"label6\",\"label_name\":\"Before-Alpha\"},{\"name\":\"tongue_SRS052227.fasta\",\"label\":\"label6\",\"label_name\":\"Before-Alpha\"},{\"name\":\"vag_intr_SRS062752.fasta\",\"label\":\"label6\",\"label_name\":\"Before-Alpha\"},{\"name\":\"stool_SRS022137.fasta\",\"label\":\"label7\",\"label_name\":\"Before-Beta\"},{\"name\":\"sub_plaq_SRS019129.fasta\",\"label\":\"label7\",\"label_name\":\"Before-Beta\"},{\"name\":\"throat_SRS014689.fasta\",\"label\":\"label7\",\"label_name\":\"Before-Beta\"},{\"name\":\"tongue_SRS015064.fasta\",\"label\":\"label7\",\"label_name\":\"Before-Beta\"}];\n\norder = [18, 24, 8, 14, 0, 23, 3, 4, 20, 9, 27, 2, 25, 15, 19, 11, 6, 21, 7, 13, 12, 1, 10, 22, 16, 17, 5, 26];\n\norder2 = [0, 1, 2, 4, 5, 6, 7, 8,  9, 10, 16,11, 12, 13, 14, 15,  17, 18, 19,3, 20, 21, 22, 23, 24, 25, 26, 27];\n\nocols = order2.map(k=>cols[k])\n\ngroupedCohorts = ocols.reduce((m, {label, label_name}) => {\n  const last = m[m.length - 1];\n  if (last && last.label === label)\n    ++last.count;\n  else\n    m.push({label, label_name, count: 1});\n  return m;\n}, [])\n\n\n\nmakeTraceReducer = koef=>([titles, summs, widths, poss], {label_name, count}, i)=> \n  [\n    [...titles, label_name], \n    [...summs, count * koef + (summs[i-1]||0) ], \n    [...widths, count * koef], \n    [...poss, (summs[i-1] || 0) + count * koef / 2 ],\n  ]\n\no = groupedCohorts.reduce(makeTraceReducer(10),[[],[],[],[]])\n\n;([\n  //o,\n  colf(o),\n  o.length,\n  order.length,\n  groupedCohorts.map(v=>v.count).reduce((m,v)=>m+v),\n  colf(groupedCohorts),\n  //colf(cols),\n  \n]).join('\\n - - - - - - - - \\n');\n\n//o[0].length\n//Array(order.length).fill(0).map((v,i)=>i)\n//groupedCohorts.map(v=>v.count).reduce((m,v)=>m+v)"},{"sourceText":"'aaaaaaaa'"},{"sourceText":"//DNO.open('dno')//cw = await DNO()\n//(async () => {\" + ctxScript + \"})().then(justShowResult)\n'<h1>lol</h1>'\njetpack.a\n\n\n\n\n\n"},{"sourceText":"levenshtein = require(\"underscore.string/levenshtein\");\ns = require(\"underscore.string\");\nstr1 = `//some text\ninput = [\n  [1,3],  \n  [2]\n];`\nstr2 = `input = [\n  [1,3],  \n  [2],\n];`\n\nmfn = [ \n  v=>v,  \n  v=>v.length,  \n  v=>s.lines(v).length,  \n\n];\nmx = [ str1, str2 ];\n\nout = mx.map(v=>Object.fromEntries(mfn.map((f,i)=>[ f.name || f, f(v)] )))\ncolf(out)\n\n\no = [];\n\nfunction sorter(a,b){\n  return a.length -b.length;\n}\n\nfunction combineStrs(s1,s2){\n  let l1 = s.lines(s1).sort(sorter); \n  let l2 = s.lines(s2).sort(sorter); \n  let maxl = Math.max(l1.length, l2.length, 0);\n\n  //return l1.join('\\n') + '\\n-2-\\n' + l2.join('\\n')\n  \n  return Array(maxl).fill(0)\n    .map((v,i)=>({\n    i, \n    l1:l1[i],\n    l1_len:l1[i]&&l1[i].length || 0,\n    l2:l2[i],\n    l2_len:l2[i]&&l2[i].length || 0,\n    \n  }))\n}\n\n\n\ntest = (s1, s2)=>{\n  \n  \n  \n  let l1 = s.lines(s1); \n  let l2 = s.lines(s2); \n  let maxl = Math.max(l1.length, l2.length);\n  \n  for(let i=0;maxl>i;i++){\n    let li1 = l1[i];\n    let li2 = l2[i];\n    \n    o.push({\n      i,\n      li1,\n      li2,\n      lvn: s.levenshtein(li1,li2),\n\n      lvn_x1: s.levenshtein(l1[i-1], l2[i]),\n      lvn_x2: s.levenshtein(l1[i], l2[i-1]),\n      \n    })\n    \n  }\n  \n  return maxl;\n}\n\n\ntest(str1, str2)\n\ncolf(o)\no1 =combineStrs(str1, str2);\n\no1 = o1.map(v=>{\n  v.lev = s.levenshtein(v.l1, v.l2)\n  return v\n});\n\ncolf(o1)"},{"sourceText":"\ns = require(\"underscore.string\");\nlevenshtein = require(\"underscore.string/levenshtein\");\n\nstr1 = `input = [\n  [1,3],  \n  [2]\n];`\n\nlevenshtein('aaa','AAA')\n;[\nJSON.stringify(str1),\nJSON.stringify(s.clean(str1)),\n];\n\n\n"},{"sourceText":"sum = a=>a.reduce((m,v)=>m+v);\n\nb = [10, 21, 32, 43, 54, 65, 76, 87, 98, 99, 11, 11];\na = [  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11];\n\n\nf = (s,i)=>[ s, \n            //q=Math.max((s-1)/2, 0),\n            p=(s-1)/2,\n            pp=p+5.5,pp|0,\n            //pp=s/2-.5,\n            !!(p%1) ,\n           \n            //[q1=Math.floor(q), q2=Math.ceil(q)], \n            [p1=p|0, p2=(p+p%1)], \n            \n            //'|q', b[q1] , b[q2] , (b[q1]+ b[q2])/2 ,\n            //'|p1', b[p1] , b[p2] , (b[p1]+ b[p2])/2 ,\n            '|p3', b[p1] , b[p2] , !(p%1)?b[p1]:(b[p1]+ b[p2])/2 ,\n            \n            '|', b.slice(0,s) ,'|', \n\n           // [s=s/2], [s+s%3], s%2, s%3,    \n           ];\n\no = a.map(f)\n\ncolf([Array(o[0].length).fill('|---- '),...o])"},{"sourceText":"timeout = 400;\nw = getWin('editor_8');\n\nrv = window.rv || '';\nvv = window.vv || '';\ncode = `editor.getValue();`;\n\n1 && w.object.webContents.executeJavaScript(code)\n  .then(v=>\n        justShowResult((rv='remote exec->\\n<pre>'\n//                       +code+'</pre>\\nEOF>>\\n'\n                       +(vv=v)+'\\n</pre> >EOF;'),1)\n       );\n\nisresultHTML =1;\nrv\n\nvv"},{"sourceText":"code = `\n\nlet n = a + b = c) + d\n//let n = a + (b = c) + d\n\n\nreturn [n,b]\n`;\n\nAsyncFunction = Object.getPrototypeOf(async function(){}).constructor\ntest = (src)=>{\n  let fn;\n  try{\n   \n//    fn = new AsyncFunction('a', 'c', 'd', src);\n    fn = new Function('a', 'c', 'd', src);\n\n  }catch(e){\n    fn = \"ERR\"+e.stack\n  }\n  return fn;\n}\n\n\ntest(code)//(1,2,3)\n"},{"sourceText":"//LOCAL CODE\n/*\n\nd3=require('d3')\n\n\n\nArray(10).fill(van_dump(d3)).join()\n//d3\n\n\njust_getKnowById(15)\n\n\n/**/\n//CURRENT CODE\n\n\np1 = Promise.resolve('Success');\np2 = Promise.resolve(12345);\np3 = Promise.reject('Failed');\n\n//Promise.allSettled([p1,p2,p3]).then(v=>justShowResult(van_dump(v)))\n\n\nobj = {\n  user: {\n    id: 123\n  }\n};\n\nprop = 'nickname'\n\n\nnickname = obj?.user?.profile?.[nickname];\n\n\nobj\n\nglobalThis\n\n\n\n\nfunction TreeNode(val, left, right) {\nthis.val = (val===undefined ? 0 : val)\nthis.left = (left===undefined ? null : left)\nthis.right = (right===undefined ? null : right)\n}\n\nt1 = new TreeNode(21,7,14)\n\nrootArr = [21,7,14,1,1,2,2,3,3]\n\n\ntt = new TreeNode();\n\nrr = rootArr.reduce((m,v)=>{\n  if(!v)return m;\n  if(!m?.val) \n     m.val = v;\n  else if(!m?.left)\n     m.left = v\n  else if(!m?.right) \n     m.right = v\n  else\n    return m.left = new TreeNode(m.left, v);\n\n  return m;\n},tt)\n\n     \n;[rr,tt];     "},{"sourceText":"\na = [\n  [1,2,3,4,5,7],\n  [2,3,6]\n];\n\nfindMedianSortedArrays = function (nums1, nums2){\n  const arr = [];\n  let n1,n2;\n  n1 = nums1.shift();\n  n2 = nums2.shift();\n\n  do{\n    if(n1&&n2)\n    if(n1<n2){\n      arr.push(n1)\n      n1 = nums1.shift();  \n    }else{\n      arr.push(n2)\n      n2 = nums1.shift();  \n    }\n\n  }while(n1 || n2)\n\n    return arr\n}\n\n\n\nfindMedianSortedArrays(...a)\n\n\n"},{"sourceText":"d3 = require('d3')\n\n\n\n\n\ndomainCalc = (height)=>{\n  const sl = d3.scale.linear().domain([0, H]).range([0, 1]);    \n\n  let midline = false;\n  const reduce_points = (m,v)=>{\n    if(v==-1){\n      midline = true;\n      return m;\n    } \n    const prevPoint = m[m.length-1];\n    if(!midline) m.push(prevPoint-v);\n    else m.push(v);\n    return m;\n  }\n\n  return (points)=>{    \n    let arr = points.reduceRight(reduce_points, [height]);\n    arr.push(0);    \n    return arr.reverse().map(sl);\n  }\n}\n\nlet arr = [150,-1,44,77];\n\nlet [a,b,c,d,e] = domainCalc(1000)(arr);\n\ndomain = {\ndendro:  [ d, e ], \ncohorts: [ c, d ],\nheatmap: [ b, c ],\n}\n\n\ncolf(domain)"},{"sourceText":"isresultHTML=1\nfunction htmlEncode( html ) {\n  return document.createElement( 'a' ).appendChild( \n    document.createTextNode( html ) ).parentNode.innerHTML;\n};\n\narr = JSON.parse(localStorage.Knows)\n  .map((v,i)=>v?{...v,i}:{i})\n  .filter(d=>d && d.sourceText);\n\n\narr.map((d,k)=>\n        `<h3>---${d.i}------------------------------------------</h3>\n  <pre style=\"overflow:none;height:200px;\">${_.escape(d.sourceText)}</pre>`\n       ).join('\\n')\n\n"},{"sourceText":"\ninp = 'UDDDUDUUUDUUDUDUDUDUUDUDUDUUDUDDUDUDUDDDDDDUDUDUUDUUDUUUDDUDUDUUUUUDDDDDDDUUUUDUDUDUDUDUDUDUDUDUUUDUDDDDDUUU'\n\narr=[0,...[...inp].map(v=>v==='U'?1:-1),0]\n\no={}\nlvl = arr.reduce((m,v,i)=>i===1?[m,m+v]:[...m, m[i-1] + v])\n  //.map((v,i)=>[i,v]);\n\no = arr.reduce((m,v,i)=>{\n  const level = m[0] + v;\n  m[0]+=v;\n  m[8][i]='-';\n  m[8-level][i] = level;   \n  //m[5-level][i] = v==-1?'\\\\':v?'/':'-';   \n  m[1][i] = ((m[1][i-1]||0)+(m[0]==0&&v>0))\n  let Lb = 14;\n  m[Lb][i] = (m[Lb][i-1]||0)+(m[Lb][i-1]==0&&v<0)\n  //m[12].push(3-level   )\n  return m;\n}, [0,[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]])\n\n\ncolf(o)\n//o\n//lvl.map(v=>v+2)\n\n\n//arr.reduce(([m,c,a],v,i)=>[m + v, m==0 && v<0?++c:c, [...a,v]], [0,0,[]])\narr.reduce(([m,c],v,i)=>[m + v, m==0 && v<0?++c:c], [0,0])[1]\n"},{"sourceText":"\nph = [0,0,1,0,0,1,0];\nph = [0,0,0,1,0,0];\n//ph = [0,1,0];\n//ph = [0,0,1,0,0,0,0,0,0,1,0,1,0];\nlen = ph.length;\nb=0;\n\nc=-1;\na=['i p ?'];\ndo{\n  //a.push(b+' '+ph[b+1]+' '+ph[b+2])\n  a.push(b+'_'+ph[b]+'_'+ph[b+2])\n  b+= !ph[b+2]?2:1;\n  c++;\n\n}while(b<len)\n\n[c,a,]\nb=[]\nfunction jumpingOnClouds(c) {\n  const len = c.length;\n  let i=0,n=0;\n  do{\n    b.push(`${i} ${c[i]} .${c[i+1]} :${c[i+2]}`)\n    i+=1+(!c[i+2])\n    n++;\n  }while(i<=len)\n  return n-1;\n}\n\n;[c,b, jumpingOnClouds(ph)];"},{"sourceText":"inpts = [\n  ['abcaca', 8],\n  ['qabcac', 10],\n  ['abacd', 6],    \n  ['aabab', 7],    \n  ['aabab', 8],    \n  ['aaaaa', 29],    \n  ['a', 1000000000000],    \n  ['a', 10],    \n];\n\ninp = inpts[0][0];\n\n\nconsole.clear()\nfunction repeatedString(s, n) {\n  const len = s.length;\n  let rk = n%len;\n  let res = Math.floor(n/len);\n  console.log(s,n,rk,len,n/len,res)\n  let c=0, e=0,  t=len,  io = -1;\n  \n  while(t--&&(io = s.indexOf('a',io+1))>=0){\n    io<=(rk-1) && c++;\n    e++;\n    console.log(io,e,c)\n  }\n  //console.log(s,res,e,c)\n  return res*e+c;\n}\n\n\nout = inpts.map(v=>[v[0],repeatedString(...v)])//.join('\\n')\n\n\n\ncolf(out)\n\n"},{"sourceText":"\nrootArr = [1,2,3,4,null,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n//rootArr = [4,2,9,3,5,null,7]\nrootArr = [21,7,14,1,1,2,2,3,3]\nrootArr = [0,1,1,2,2,0,2,3,3,3,3,3,3,3,3,4];\nrootArr = [0,1,1,2,2,null,0,2,3,3,3,3,3,3,3,3];\n\nj=0\n\nfunction TreeNode(val, left, right) {\n  //this.i = j++\n  //this.kind = 'ROOT'  \n  this.val = (val?? 0)\n  this.left = (left===undefined ? null : left)\n  this.right = (right===undefined ? null : right)\n\n}\n\nif(0)\nTreeNode.prototype.toString = function(){\n  return `${this.kind} ${this.i} ${this.val} ${((this.left??this.right??null)===null)?'':`  \n  ${((this.left??'ø')+'').split('\\n').join('\\n  +')}\n  ${((this.right??'ø')+'').split('\\n').join('\\n  +')}`\n}`;\n}\n\n\nif(0)\nObject.defineProperty(TreeNode.prototype,'toString',{\n  enumerable: false,\n  value:function(){\n    let l = this.left?this.left.val:'ø';\n    let r = this.right?this.right.val:'ø';\n\n    return `(${l} ${r})`;\n\n    return `(${this.left??'ø'}${this.right??'ø'})`;\n  }\n});\n\nconsole.clear()\na=[];\n\ntoTree = (root, arr)=>{\n  let tempArr = [root];\n  let ol = arr.length>>1;\n  let s, i=0;\n\n  while((s=tempArr.shift())){ //!arr.length && \n    \n    \n    //console.log(i,'NODE', s) \n    //console.log('tempArr', tempArr.map(v=>v.val)) \n    //console.log('arr',arr[0],) \n    //console.log('arr', arr.length, arr.length>>1, ol) \n\n    if(!arr.length) break;\n    \n    //let t,tt;\n    fff = (k)=>{\n      let t = arr.shift();\n      if(t === null) return null;\n      \n      let tt = new TreeNode(t);\n      //tt.kind = k\n      tempArr.push(tt)\n      a.push(tt) \n      return tt;\n    }\n    \n    s.left = fff('left');\n    s.right = fff('right');\n    \n\n    \n    \n    if(++i>27) return //throw Error('dedloop');\n  }\n\n}\nra = [...rootArr];\nrt = new TreeNode(ra.shift());\ntoTree(rt, ra);\n\nb =[];\n\nfindTilt = function(root) {\n  let tmpArr=[];\n\n\n  let i=0;\n  function re(r, rlr){\n    \n    console.log('NODE', rlr, r ,  !r.left && !r.right)\n    debugger\n //   if(!r) return 0;\n    if(!r.left && !r.right)\n      return r.val||0;\n    \n    let left = r.left&&re(r.left, 'left   ') || 0\n    let right = r.right&&re(r.right, 'right  ') || 0\n    //b.push(r??0)\n    let diff = Math.abs(left - right);    \n    \n    tmpArr.push(diff)\n    \n    b.push({i:i++,val:r.val,left,right,diff, sum:left+right+r.val})\n    console.log(r.val,left,right)\n    return left+right+r.val||0;\n  }\n  \n  o = re(root, 'root   ');\n  \n  return tmpArr.reduce((m,v)=>m+v);\n}\n\nd = findTilt(rt);\n\n//b\ncolf(b)\n+'\\n--\\n'+d;\n\nJSON.stringify(rt)+'\\n\\n'\n//rt.right"},{"sourceText":"rootArr = [1,2,3,4,null,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n//rootArr = [4,2,9,3,5,null,7]\nrootArr = [21,7,14,1,1,2,2,3,3]\nrootArr = [0,1,1,2,2,0,2,3,3,3,3,3,3,3,3]\n\nrootArr2 = Array((1<<4)-1).fill(0).map((v,i)=>{\n  //return 1;\n  if(i===5){\n    return 0\n  }\n  return Math.log2(i+1)|0\n\n});\n\nfindTilt = function(root) {\n  const rnn = root.map((v,i)=>!v&&(i)*2).filter(v=>v);\n  const out = root.reduceRight((m,v,i)=>{\n    let ix = ((i+1)>>1) -1 + rnn.filter(v=>i>v).length;\n\n    let r = 0\n\n    if(m[i]){\n      r = m[i][1]\n\n    }\n\n    if(!m[ix]){\n      m[ix] = [v+r, v+r];\n\n    }else{\n      m[ix][0] = Math.abs(m[ix][1] - (v+r));\n      m[ix][1] += v+r;\n    }\n\n\n\n    return m;\n\n  },[])\n\n  return out.reduce((m,v)=>m+v[0],0)\n};\n\na = findTilt(rootArr)\n\n\n//rootArr+''//.length\n"},{"sourceText":"\nlis = [[1,4,5],[1,3,4],[2,6]]\n\no=[];\nconsole.clear()\nmergeKLists = function(lists) {\n  let bi=35;\n  let lc=lists.length, ln = lists.map(v=>0);\n  \n  let arr = [];\n  \n  \n  while(bi--){\n    const mp = ln.map((v,i)=>lists[i][ln[i]]);\n    let min = Math.min(...mp.filter(v=>v));\n    let indx = mp.indexOf(min)\n    console.log(...mp,' - ',min,indx,'.', ...ln)\n    ln[indx]++;\n    arr.push(min);\n    \n    o.push([mp,Math.min(...mp),, indx, ln[indx]])\n  }\n  \n  return [arr, ln,lc]\n};\n\n\nmergeKLists(lis)\n\n//colf(o)"},null,null,null,null,null,null,{"sourceText":"\ntimes = (n=1)=>(f, ...args)=>Array(n).fill(0).map(v=>f(...args.map(v=>Array.isArray(v)?[...v]:{...v})));\no={};\n\ntest = (itr=1, mlt=1)=>(fns, ...args)=>{\n  const timers = {};\n  //console.clear()\n\n  for(let fn of fns){\n    timers[fn.name] = {avg:null,r:[]};\n    for(let i=1;mlt>=i;i++){\n      // console.log(mlt,i)\n      const name = '#'+i+'_'+fn.name;\n      //console.time(name)\n      const start = window.performance.now();\n\n      o[fn.name] = times(itr)(fn, ...args);\n\n      //console.timeEnd(name)\n      timers[fn.name].r.push(window.performance.now() - start);\n    }\n\n    timers[fn.name].avg = timers[fn.name].r.reduce((m,v)=>m+v,0)/mlt;\n    timers[fn.name].res = o[fn.name][0];\n    delete timers[fn.name].r;\n  }\n\n\n  const result = 1\n\n\n\n  return timers;\n}\n\nrootArr = [1,2,3,4,null,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n//rootArr = [21,7,14,1,1,2,2,3,3]\nrootArr = [0,1,1,2,2,0,2,3,3,3,3,3,3,3,3]\n\n\nfunction TreeNode(val, left, right) {\n  this.val = (val===undefined ? 0 : val)\n  this.left = (left===undefined ? null : left)\n  this.right = (right===undefined ? null : right)\n}\nfunction toTree(root, arr){\n  let tempArr = [root]\n  let s;\n\n  while(s=tempArr.shift()){\n     \n    let t;\n    if(t = arr.shift()){\n      let tt = new TreeNode(t);\n      tempArr.push(tt)\n      s.left = tt;\n      \n    }\n    \n    if(t = arr.shift()){\n      let tt = new TreeNode(t);\n      tempArr.push(tt)\n      s.right = tt;\n    }\n  }\n}\nfunction findTilt(root) {\n  let tmpArr=[];\n\n  function re(r){\n    \n    if(!r) return 0;\n    if(!r.left && !r.right)\n      return r.val??0;\n    \n    let left = re(r.left)\n    let right = re(r.right)\n    let diff = Math.abs(left - right);    \n    \n    tmpArr.push(diff)   \n    return left+right+r.val;\n  }\n  re(root);\n  return tmpArr.reduce((m,v)=>m+v);\n}\nfunction findTilt2(root) {\n  const rnn = root.map((v,i)=>!v&&(i)*2).filter(v=>v);\n  const out = root.reduceRight((m,v,i)=>{\n    let ix = ((i+1)>>1) -1 + rnn.filter(v=>i>v).length;\n\n    let r = 0\n\n    if(m[i]){\n      r = m[i][1]\n\n    }\n\n    if(!m[ix]){\n      m[ix] = [v+r, v+r];\n\n    }else{\n      m[ix][0] = Math.abs(m[ix][1] - (v+r));\n      m[ix][1] += v+r;\n    }\n\n\n\n    return m;\n\n  },[])\n\n  return out.reduce((m,v)=>m+v[0],0)\n};\nfunction mkTree(rootarr){\n  let rarr = [...rootarr];\n  let rt = new TreeNode(rarr.shift());\n  toTree(rt, rarr);\n  return rt;\n}\n\n\n\nfn1WithmkTree = (rarr, rTree)=>{  \n  let rt = mkTree(rarr);\n  return findTilt(rt)\n}\n\n\nfn1Tree = (rarr, rTree)=>{  \n  return findTilt(rTree)\n}\n\n\nfn2Arr = (rarr)=>{\nreturn findTilt2(rarr);\n}\n\nfn3mkTree = (rarr)=>{\nreturn mkTree(rarr).val;\n}\n\n\nrt = mkTree(rootArr);\n\ntest(100,50)([fn3mkTree, fn1WithmkTree, fn1Tree, fn2Arr], rootArr, rt)"},null,null,null,null,{"sourceText":"\nuser2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint == 'number') {\n      return 10;\n    }\n    if (hint == 'string') {\n      return 'hello';\n    }\n    return true;\n  },\n  getItem(name){\n    return {name}\n  }\n}\n\nuser= {\n  //isP:true\n};\n\narr = [\n  'toJSON',\n\n];\n\nmkp = (dat, kod)=>new Proxy(dat, {\n  has(target, property) {\n    return hasProperty(property);\n  },\n  get(target, prop, receiver) {\n    console.log(kod, target, prop, receiver)\n\n    let key = prop;\n    \n    if (typeof prop === 'symbol') {\n      console.log(111)\n      key = 'sy';\n      return target[prop];  \n    }\n    \n    switch (prop) {\n      case \"handle\":\n        return handle;\n      case \"prototype\":\n        return target.prototype;\n      case \"constructor\":\n        return target.constructor;\n      case \"hasOwnProperty\":\n        return hasProperty;\n      case \"toJSON\":\n        return toJSON;\n      case \"toString\":\n      case \"valueOf\":\n        const descriptionImpl = receiver.description;\n        if (descriptionImpl !== undefined) {\n          const description = descriptionImpl.call(receiver);\n          if (description !== null)\n            return description.UTF8String.bind(description);\n        }\n         return function () {\n         return receiver.$className;\n         };\n      }\n\n    target[prop] = {};\n    return mkp(target[prop], 'k_')\n  },\n\n\n});\n\nproxy = mkp(user,'rr')\n\naisproxy = ()=> new Proxy(this, {\n  has(target, property) {\n    return hasProperty(property);\n  },\n  get(target, property, receiver) {\n    switch (property) {\n      case \"handle\":\n        return handle;\n      case \"prototype\":\n        return target.prototype;\n      case \"constructor\":\n        return target.constructor;\n      case \"hasOwnProperty\":\n        return hasProperty;\n      case \"toJSON\":\n        return toJSON;\n      case \"toString\":\n      case \"valueOf\":\n        const descriptionImpl = receiver.description;\n        if (descriptionImpl !== undefined) {\n          const description = descriptionImpl.call(receiver);\n          if (description !== null)\n            return description.UTF8String.bind(description);\n        }\n        return function () {\n          return receiver.$className;\n        };\n                    }\n  }\n});\n\na = proxy.a.b.c.d++\n\n//a|1 //+ 1\n\n//user\n//arr.includes\n//\n1"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"sourceText":"rt = {\"val\":0,\"left\":{\"val\":1,\"left\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}},\"right\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}},\"right\":{\"val\":1,\"left\":{\"val\":0,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}},\"right\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}}}\nrt = {\"val\":0,\"left\":{\"val\":1,\"left\":{\"val\":2,\"left\":{\"val\":3,\"left\":{\"val\":4,\"left\":null,\"right\":null},\"right\":{\"val\":0,\"left\":null,\"right\":null}},\"right\":{\"val\":3,\"left\":null,\"right\":null}},\"right\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}},\"right\":{\"val\":1,\"left\":{\"val\":0,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}},\"right\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}}}\nrt = {\"val\":0,\"left\":{\"val\":1,\"left\":{\"val\":2,\"left\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}},\"right\":{\"val\":3,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":0,\"left\":null,\"right\":null}}},\"right\":{\"val\":2,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}},\"right\":{\"val\":1,\"left\":null,\"right\":{\"val\":0,\"left\":{\"val\":3,\"left\":null,\"right\":null},\"right\":{\"val\":3,\"left\":null,\"right\":null}}}}\n\nfindTilt = function (root) {\n  let tmpArr = [];\n\n  function re(r, rlr) {\n    if(r===null)\n      return 0;\n    \n    if (!r.left && !r.right)\n      return r.val || 0;\n\n    let left = r.left && re(r.left) || 0;\n    let right = r.right && re(r.right) || 0;\n\n    let diff = Math.abs(left - right);\n\n    tmpArr.push(diff)\n\n    //b.push({i:i++,val:r.val,left,right,diff, sum:left+right+r.val})\n    //console.log(r.val,left,right)\n    return left + right + r.val || 0;\n  }\n\n  o = re(root);\n\n  return tmpArr.reduce((m, v) => m + v);\n}\nfindTilt2 = function(root) {\n    let total = 0;\n    function tilt_rec(node) {\n        if (node === null) return 0;\n        const left = tilt_rec(node.left);\n        const right = tilt_rec(node.right);\n        total += Math.abs(left - right)\n        return left + right + node.val;\n    }\n    tilt_rec(root);\n    return total;\n};\nd = findTilt2(rt);\n\n\n"},null,null,{"sourceText":"if(!window.Gun) Gun = require('gun/gun');\nHOST = \"http://localhost:5050/gun\";\nif(!window.gun) gun = Gun(HOST);\n\n\n\n\n\n\n\n\n\n"}]