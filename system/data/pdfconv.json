{"key":"test_for_lianearize","source":"var {exec, spawn} = require('child_process');\nvar _s = require('underscore.string');\n\nbank = [];\n\nprnt = (str)=>{\n  bank.push(str)\n  justShowResult(bank.join('\\n'),1)\n}\n\nprnt_std = str=>prnt(`<code style=\"color:#ffeb3b;\">${String(str)}</code>`)\nprnt_err = str=>prnt(`<code style=\"color:#ff5722;\">${String(str)}</code>`)\nprnt_fin = str=>prnt(`<code style=\"color:#aed581;\">${String(str)}</code>`)\n\n\nresarr = [];\nparse_info = ()=>{\n\n  let out = resarr.map(([doc,res])=>{\n    let o = String(res).trim().split('\\n')\n    \n    .map(s=>s\n         .split(':',2).map(v=>v.trim())\n        )\n    .map(v=>[_s.camelize(v[0]),''+v[1]+''])\n      return Object.assign({doc},_.object(o));\n  })\n  return out;\n  \n  prnt_fin(van_dump(out))\n  //justShowResult(colf(out),1);\n}\n\nrun = (doc)=>{ \n  let startTime = Date.now();\n  let exec_cmd = 'pdfinfo';\n  let exec_args = [doc.realPath];\n  prnt_fin(`#START: \\n${exec_cmd} ${exec_args.join(' ')}\\n`)\n  let child = spawn(exec_cmd, exec_args);\n  \n  child.stdout.on('data', (data)=>{\n    resarr.push([doc.realPath, String(data)]);\n    prnt_std(data);\n  });\n\n  child.stderr.on('data', prnt_err);\n\n  child.on('close', (code) => {\n    let duration = Date.now() - startTime;\n    let pinf = parse_info()\n    prnt_fin(van_dump(pinf));\n  });\n\n}\n\nshow = (err, data)=>{\n  list = data.slice(0,1)\n  list.map(run)\n  \n  //jLog(list)\n}\n\nst = require('convertor/new_store').store.open('db_stage_bugdocs');\n\nst.getDb().find({}).exec(show)\n//resarr","_id":"5L5sxHarxtJiGD6r"}
{"key":"clean_require","source":"m = remote.require('module')\nmn = require.resolve('convertor/new_store')\nmm = m._cache[mn];\n\nm._cache[mn] = false\n","_id":"9qyjAoSOW9KbGPg0"}
{"key":"spawn_gs","source":"var {exec, spawn} = require('child_process');\nvar Queue = require('queue');\nvar {make_queued} = require('convertor/utils');\n\np = '/Users/rainerg/work/ideals/_A/stage_bugdoc_list.txt'\n\ntxt = jetpack.read(p)\nlist = txt.split('\\n')//.slice(0,15)\n\nbank = [];\n\nprnt = (str)=>{\n  bank = bank.slice(-100);\n  bank.push(String(str));\n  justShowResult(bank.join('\\n'),1)\n}\n\nprnt_std = str=>prnt(`<code style=\"color:#ffeb3b;\">${String(str)}</code>`)\nprnt_err = str=>prnt(`<code style=\"color:#ff5722;\">${String(str)}</code>`)\nprnt_fin = str=>prnt(`<code style=\"color:#aed581;\">${String(str)}</code>`)\n\n\nwindow.bbank = [];\n\nrun = ([input_file, output_file])=>new Promise((resolve, reject)=>{\n  let startTime = Date.now();\n  let exec_cmd = 'gs'; \n  let exec_args = [\n    '-dBATCH', '-dNOPAUSE', '-sDEVICE=pdfwrite',// '-q',\n    //'-dNumRenderingThreads=8', //     % increasing up to 64 didn't make much difference\n    //'-dBandHeight=100', //            % didn't matter much\n    //'-dBandBufferSpace=500000000', // % (500MB)\n    //'-sBandListStorage=memory', //    % may or may not need to be set when gs is compiled\n    //'-dBufferSpace=1000000000', // \n    //'-dNOGC',\n    \n    '-dFastWebView', //'-dDOPDFMARKS',\n    '-sOutputFile='+output_file, \n    //'-c \"1000000000 setnvmthreshold\"','-f',\n    input_file];\n  \n  prnt(`#START# run \"${exec_cmd} ${exec_args.join(' ')}\"`);\n  let child = spawn(exec_cmd, exec_args);\n  child.stdout.on('data', prnt_std);\n  child.stderr.on('data', prnt_err);\n  child.on('close', (code) => {\n    let duration = Date.now() - startTime;\n    let sizeOrigin = jetpack.inspect(input_file).size;\n    let sizeGsLin = jetpack.inspect(output_file).size;\n    \n    let fin_text = `#FINISH#\n  file=${output_file}\n  sizeOrigin=${sizeOrigin}\n  sizeGsLin=${sizeGsLin}\n  duration=${duration}\n`;\n    let outdata = {output_file: output_file.slice(50),\n             sizeOrigin,\n             sizeGsLin,\n             duration };\n    bbank.push(outdata);\n    prnt_fin(fin_text);\n    document.getElementById('result').innerHTML = jColf(bbank);\n    resolve(outdata);\n  });\n})\n\n//ip = '/Users/rainerg/work/ideals/_stage_bugdocs/1234/56068.pdf';\nresdir = '/Users/rainerg/work/ideals/_stage_bugdocs_gs_lin2/';\n//jetpack.dir(path.dirname(op));\n//jetpack.file(op);\n\nlist = list.map((ip)=>{\n  let po = path.parse(ip.slice(42));\n  let op = path.resolve(resdir, po.dir+'_'+po.name+'.lin.pdf');\n  jetpack.dir(path.dirname(op));\n  return [ip, op];\n});\n\nqueue = new Queue({concurrency: 1});\n\nconverting = list.map(make_queued(queue, run));\n\nqueue.start(); //move out of here\n\nout = Promise.all(converting).then(v=>{\n  prnt_fin('\\n#ALL DONE#');\n  document.getElementById('result').innerHTML = jColf(v);\n})\n\n//van_dump(out)\n\n\n","_id":"Gf2c7rdEjp9oX3yI"}
{"key":"nedb_tableview2","source":"\nshow = (err, data)=>{\n\n  let out = data.map(v=>Object.assign(\n    _.omit(v,['key','paths','_id','metadata']),\n    {\n      metaPDFFormatVersion:v.metadata&&v.metadata.info&&v.metadata.info.PDFFormatVersion||'no_info',  \n      metaCreator:v.metadata&&v.metadata.info&&v.metadata.info.Creator||'no_info',  \n      metaProducer:v.metadata&&v.metadata.info&&v.metadata.info.Producer||'no_info'  \n    }\n  ))\n\n  justShowResult(colf(out,{columnSplitter:','}))\n  \n  //jLog(data)\n}\n\nst = require('convertor/new_store').store.open('db_stage_bugdocs');\n\nst.getDb().find({}).exec(show)\n\n\n\n\n\n\n\n\n\n","_id":"OWmjCz9HlGUHQeoA"}
{"key":"nedb_load_db","source":"\nlet store = require('convertor/new_store').store\n\nlet st = store.open('db_stage_bugdocs')//.getAll()\nlet db = st.getDb()\n\n\nlet show = ()=>{\n  let v = st.getAll();\n  v = v.map((doc, num)=>Object.assign({num},doc))\n  window.data = colfix(v);\n  setData(window.data);\n\n\n}\n\ndb.loadDatabase(show)\n\n'loading'\n\n//st.save('aaa1',{yo:'kjvlkmclkmv'})\n\n//jColf(st.getAll())","_id":"SsbNMDzGbDPhgpmc"}
{"key":"write_csv","source":"dir = '/Users/rainerg/work/ideals/_A/_LIN'\n\ntoCsv = (file)=>{\n  let p = path.resolve(dir, file+'.nljson')\n  let op = path.resolve(dir, file+'.csv')\n  \n  let txt = jetpack.read(p)\n  let list = txt.trim().split('\\n')//.slice(0,10)\n\n  list = list.map(JSON.parse)\n    .map(({output_file,sizeOrigin,sizeGsLin,duration})=>{\n    let docId = output_file.slice(20).slice(0,-8);\n    return {docId,sizeOrigin,sizeGsLin,duration}\n  })\n  //list.length\n  \n  let csv = colf(list, {columnSplitter:';'});\n\n  jetpack.write(op,csv);\n  return ['CSV WRITED SUCCESFULLY',p,op];\n}\n\nfiles = jetpack.dir(dir).find({matching: '*.nljson'}).map(path.parse)\n\nfiles.map(v=>v.name).map(toCsv)\n//result_append_www1","_id":"gvPVLTTfqIbR08pB"}
{"key":"quality_test_ghost_spawn","source":"var {exec, spawn} = require('child_process');\ndir = '/Users/rainerg/work/ideals/_0/VDR-16863/'\n\n\nbank = [];\n\nprnt = (str)=>{\n  bank = bank.slice(-100);\n  bank.push(String(str));\n  justShowResult(bank.join('\\n'),1)\n}\nprnt_std = str=>prnt(`<code style=\"color:#ffeb3b;\">${String(str)}</code>`)\nprnt_err = str=>prnt(`<code style=\"color:#ff5722;\">${String(str)}</code>`)\nprnt_fin = str=>prnt(`<code style=\"color:#aed581;\">${String(str)}</code>`)\n\nrun = (input_file, output_file)=>{\n  let exec_cmd = 'gs'; \n  //gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -dFastWebView -dPDFSETTINGS=/screen  -sOutputFile=723333.lin-scr.pdf 723333.pdf\n  let dip = \"'.setpdfwrite \"\n  + \"<</AlwaysEmbed [/Helvetica /Times-Roman]>>\"\n  + \"setdistillerparams'\";\n  let exec_args = [\n    '-dBATCH', '-dNOPAUSE', '-sDEVICE=pdfwrite',// '-q',\n    '-dFastWebView', \n    '-sOutputFile='+output_file, \n    '-c ' + dip ,'-f',\n    input_file];\n\n  let child = spawn(exec_cmd, exec_args);\n  child.stdout.on('data', prnt_std);\n  child.stderr.on('data', prnt_err);\n  child.on('close', prnt_fin)\n}\n\nfile = '723333'\n\ninput = dir+file+'.pdf';\noutput = dir+file+'.lin-hq.pdf';\n\nrun(input, output);\n","_id":"nOn0td61Q1WH0PSB"}
{"key":"nedb_tableview","source":"nedb = require('nedb');\ndbPath = '/Users/rainerg/work/ideals/5000_pdfs_archive/PUT_HERE/db/convertor_results_www5.db';\n//db = new nedb({filename: dbPath, autoload: true});\n\n\nout = db.getAllData()\n\nout = out.map(v=>Object.assign(\n  _.omit(v,['key','paths','_id','metadata']),\n  {\n    metaPDFFormatVersion:v.metadata&&v.metadata.info&&v.metadata.info.PDFFormatVersion||'no_info',  \n    metaCreator:v.metadata&&v.metadata.info&&v.metadata.info.Creator||'no_info',  \n    metaProducer:v.metadata&&v.metadata.info&&v.metadata.info.Producer||'no_info'  \n  }\n))\n\ncolf(out,{columnSplitter:','})\n\n\n\n","_id":"pc0XD8Rs1ZTJXldm"}
{"key":"nedb_init_liist","source":"//dir = '/Users/rainerg/work/ideals/_stage_bugdocs/';\nif(!window.dir)\n  dir = dialog.showOpenDialog({properties: ['openDirectory']})[0];\n\ndocInfo = docPath=>{\n  let realPath = path.resolve(dir,docPath);\n  let {size:docSize, md5:docMD5} = jetpack.inspect(realPath, {checksum:'md5'});\n  return {status:'init',docPath, realPath, docSize, docMD5};\n}\n\njd = jetpack.cwd(dir)\nlist = jd.find({matching: '*.pdf'});\n\nout = list.map(docInfo)\n\nst = require('convertor/new_store').store.open('db_stage_bugdocs2');\n\nout.map(v=>{\n  st.save(v.docPath, v)\n})\n\n\n\n//jColf(out, {columns: ['docPath', 'docSize']});\n\n\nout.length\n\n\n","_id":"sJhYvqCJDXTAW6N2"}
