{
  "add": "tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">\n<input type=\"text\" class=\"form-control form-control-mini\" \nplaceholder=\"enter name\">\n</div>\n`;\n\nel = $(tpl);\n\n$('#second_toolbar').html(el)\nel.find('.act-back').click(just.render);\nel.find('.act-save').click(function(){\n\tvar nn = el.find('input').val().trim();\n  if(nn && nn != ''){\n\t  just.setName(nn);\n  \tjust.render()\n  }\n});\n",
  "edit": "\njust.run2 = just.run; \njust.run = just.edit;\n\n$('#second_toolbar').addClass('act-edit')\n",
  "save": "\n\nif(just.name){\n\tjust.set(just.name, editor.getValue())\n  justShowResult('<b style=\"color:green;\">Only saved code</b>', true)\n}else{\n  just.run('add');\n}\njust.save();\n",
  "load": "\njust.load();\n just.render();\n",
  "lsWin": "const ssr=(t, L=25)=>(t+':'+' '.repeat(L)).substr(0,L);\n\nconst MAXLEN = Object.keys(windowManager.windows).reduce((m,v)=>Math.max(m, v.length+1),0);\nconst ssn=(L=4)=>([key, v])=>key+': '+(' '.repeat(L)+v).substr(-L);\nconst cb2line = b=>\"{\"+Object.entries(b).map(ssn()).join(\", \")+\"}\";\n\nlet confirmClose = \"\";\n\nwindow.w_fns = {\n  r: name=>getWin(name).reload(),\n  f: name=>getWin(name).focus(),\n  c: name=>confirmClose !== name \n    ? alert(\"Want CLOSE \"+ (confirmClose = name)) \n    : (alert(\"closing \"+name),getWin(name).close()),\n};\n\nlet wls = _(windowManager.windows).map(function(v){\n  \n  const wb = v.object.getBounds();\n  return `<span class=\"winline\"><u class=\"r\"onClick=\"w_fns.r('${v.name}')\">R</u> ` \n    + `<u class=\"f\" onClick=\"w_fns.f('${v.name}')\">F</u> `\n    + `<u class=\"c\" onClick=\"w_fns.c('${v.name}')\">C</u> `\n    + `<b style=\"font-size: 1.1em;\"> ${ssr(v.name, MAXLEN)}</b> ${cb2line(wb)}</span>`;\n  \n\n\n})\nlet res = `<style>\n.winline {\n  bbackground: grey;\n  ccolor: crimson;\n}\n.winline u {\n  padding: 2px 5px;\n  color: #fcffda;\n  border-radius: 5px;\n  border: 1px solid #9E9E9E;\n  cursor: pointer;\n}\n.winline u.r { background: #035906; }\n.winline u.f { background: #410f90; }\n.winline u.c { background: #bd0505; }\n</style>`\n    + wls.join(\"\\n\")\n\njustShowResult(res, true)\n",
  "dump": "\nvar res = _(eval(editor.getValue())).chain()\n  .mapObject(function(v, k){\n    var tpl = `<div class=\"toolbar bar result\">\n<pre> <big>${k}</big>\t\n   <code>${_.escape(String(v).trim())}</code>\n</pre></div>`\n    return tpl;\n  })\n  .values()\n\t//.first(7)\n  .value()\n  .join('<hr/>\\n')\n\n$('#composite').html(res);\nsyncSizeLines()",
  "dump-ß": "\n$('#composite').toggleClass('joinY')\nsyncSizeLines()\n",
  "clr": "\n//createBrowser('http://gooogle.com')\n$('#composite').html('');\n$('body').css('backgroundColor','transparent');\njustShowResult(null)\ndocument.querySelector('header').style.background = 'rgba(41, 120, 177, 0.5)';\n",
  "color": "\n\n//justShowResult(van_dump(arguments))\nif(arguments[1]){\n  arguments[1].classList.toggle('btn-default');\n  arguments[1].classList.toggle('btn-warning');\n}\nif(typeof colorRotate == 'undefined' || !colorRotate){\n//  n=0;\n  colorRotate = setInterval(function(){\n    n = n%359;\n    clr = `hsla(${n++},82%,52%,0.5)`;\n    $('body').css('backgroundColor',clr);\n    //justShowResult(n)\n  },50);\n}else{\n  clearInterval(colorRotate);\n  colorRotate = false;\n}\n\n",
  "Œ zoom": "\n//$('#editor').toggleClass('fliped')\n//justScale(1.5)\n\nscl_slider_fn = (value, fire)=>{\n  //alert(value)\n  //fire&&jLog(\"scale is \"+value/100+' '+fire);\n  \n  document.getElementById(\"slider1val\").innerText = value;\n  if(fire) {\n    document.getElementById(\"slider1\").value = value;\n    fire&&setTimeout(\"justScale(\"+value/100+\")\",50); \n  }\n}\nslp = cw.webContents.getZoomFactor()*100;\ntpl = jade.compile(`\n:stylus\n  .aa\n    font-size: 30px\n.btn-group\n  button.btn.btn-mini.btn-default.act-back\n    span.icon.icon-left-open-big\n  \nspan &emsp;scale&emsp;\nbutton.btn.btn-mini.btn-default.act-back\n    span.icon.icon-block(onclick='scl_slider_fn(100,true)')\nspan &emsp;\nform.btn-group(oninput='scl_slider_fn(slider1.value)', onchange='scl_slider_fn(slider1.value, true)')\n  input.btn.btn-default.form-control.form-control-mini#slider1(type='range', value=100, min=50, max=300, step=1)\nspan &emsp;\n  span#slider1val ${slp}\n  |%\n\n`);\n\nel = $(tpl());\n\n$('#second_toolbar').html(el)\nel.find('.act-back').click(just.render);//<div style=\"background:rgba(255,193,7,0.3); margin:0px; padding:5px;\">\n",
  "md5": "\nhash = md5(editor.getValue())\njustShowResult(van_dump(hash))\n",
  "ksave": "\nif(just.name){\n  if(!isAutoRuned)\n\tKnows.save(just.name, editor.getValue());\n  if(w = getWin(just.name)){\n  \tw.execute(\"Knows.run('\"+just.name+\"')\")\n  \tjustShowResult('<b style=\"color:orange;\">Saved code and Updated window {'+just.name+'}</b>', true)\n  }else{\n    justShowResult('<b style=\"color:green;\">Only saved code</b>', true)\n  }\n}else{\n  just.run('add');\n}\n'wait'\n",
  "krun": "\n\nif(w = getWin(just.name))\n  w.execute(`Knows.run('${just.name}');`)\nelse\n\tKnows.run('editor');\n\n",
  "kedit": "\n\n\nif(just.name){\n\tkey = just.name;\n   saveCodeOverride = runCodeOverride = function(){\n     just.run('ksave');\n  }\n\tKnows.getDb().findOne({key:key}).exec(function(err,data){\n\t\tstr = data.source\n\t\teditor.setValue(str) //editor.getValue()+'\\n'+\n\t})\n}else{\n  just.run('add');\n}\n",
  "kls": "\n\n\nKnows.getDb().find({ key: { $exists: true } }).sort({key:1}).exec(function (err, docs) {\n  //justShowResult(_.zip(_(docs).pluck('key'),_(docs).pluck('source')).join('\\n--\\n'))\n  \n  var list = _(docs).chain()\n\t.map(function(v,k){\n    return `<button class=\"btn btn-mini btn-default act-choose\" data-key=\"${v.key}\">\n<span class=\"icon icon-down-open-mini\"></span> \n<span class=\"icon icon-text\"> ${v.key}</span>\n</button>`;})\n  .value().join('');\n\t\n  tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">${list}</div>`;  \n\n  el = $('#second_toolbar');\n  el.html(tpl);\n  el.find('.act-back').click(just.render);\n  el.find('.act-choose').click(function(e){\n    var nn = $(this).data('key');\n    if(nn && nn != ''){\n      just.setName(nn);\n      just.render()\n      just.run('kedit');\n    }\n  });\n  \n  justShowResult('done')\n});\n//Object.keys(kk)\n'wait'\n\n",
  "ToT": "\n\nq = !(typeof q == 'boolean') || !q;\nexw = [\"toolbar\", \"listknows\", \"showTime\", \"fulloverlay\"];\n_(windowManager.windows).chain()\n  .filter(function(w){\n    return !exw.includes(w.name)\n  })\n  .each(function(w){\n  w.object.setAlwaysOnTop(q);\n})\n\n",
  "ignore_mouse": "\n\n\nw = getWin(just.name)\nw.setIgnoreMouseEvents(!w.isIgnoreMouseEvents())\n",
  "jetpack_sample": "\n\n\njetpack.find(remote.app.getHomeDir()+'/Desktop/',\n             { matching: 'Screen Shot*'})\n",
  "chromeAllTabs": "\nalltabs = jetpack.read('../allTabs_chrome.json', 'json');\njustShowResult(_(alltabs).pluck('url').join('\\n'))\n",
  "editor_0": "tf = false || !tf\nw = getWin(just.name)\nw.object.setIgnoreMouseEvents(tf)\n",
  "resulttoMIN0": "\nvar resWin = giveWin('results_from_editor');\nresWin.object.setSize(700,500)\n//justShowResult(van_dump(arguments))\n\n\n_send_to_min0 = function(text){\n  windowManager.sharedData.set('minTest0', {'content': text});\n  resWin.execute(`\ndata = windowManager.sharedData.fetch('minTest0');\nsetData(data.content);\n//ce = document.getElementById('content').parentElement;\n//ce.scrollTop = ce.scrollHeight;\n`);\n\n}\nsend_to_min0 = _.throttle(_send_to_min0,100);\n\njustResultToMin = function(){\n  var text = eval(editor.getValue());\n  send_to_min0(text);\n}\n\njsr_override = function(result, isHTML){\n  send_to_min0(result);\n}\n\n\nactivate = ()=>{\n  _justShowResult = justShowResult;\n  justShowResult = jsr_override;\n  runCodeOverride = justResultToMin;\n  resulttomin = true;\n}\n\ndeactivate = ()=>{\n  justShowResult = _justShowResult;\n  runCodeOverride = false;\n  resulttomin = false;\n}\n\n(typeof resulttomin == 'undefined' || !resulttomin)\n  ? activate()\n  : deactivate();\n\n\nif(arguments[1]){\n  arguments[1].classList.toggle('btn-default');\n  arguments[1].classList.toggle('btn-warning');\n}\n\n",
  "SaveToCodeList": "\nif (just.name) {\n    source = editor.getValue()\n    hash = md5(source)\n    doc = {key: just.name || hash, source: source, md5: hash, system: 'solar', isFunc: false}\n\n    console.log(runOptions);\n    let cb = (runOptions && !runOptions.silence)\n        ? (d) => justShowResult('<b style=\"color:green;\">Only saved code</b>', true)\n        : () => {};\n    Database.getDb().update({key: doc.key}, doc, {upsert: true}, cb);\n\n\n} else {\n    just.run('add');\n}\n\n",
  "addMatrixXYfunc": "\nif(just.name){\n\tsource = editor.getValue()\n  hash = md5(source)\n  doc = { key: just.name, source: source, md5: hash, matrix: 'matrix1', isFunc: true }\n\n  Matrix.getDb().update({key:doc.key}, doc, {upsert: true});\n\n}else{\n  just.run('add');\n}\n\n",
  "SEND_TO_CHARLY": "\n\ntimeout =1500;\n\nip = '159.224.183.122';\n\nif(!window.CHAT_SOCKET){\n  window.CHAT_SOCKET_PARSE = window.CHAT_SOCKET_PARSE = (data)=>{eval(data, true)}//justShowResult;\n  CHAT_SOCKET = require('socket.io-client')('http://'+ip+':3000');\n  CHAT_SOCKET.on('msg', window.CHAT_SOCKET_PARSE)\n}\n\nCHAT_SOCKET.emit('msg', editor.getValue());\njustShowResult('Connected: '+CHAT_SOCKET.connected);\n;'con...'\n",
  "CHAT_SERVER": "\n//parse = data=>{\n\n//justShowResult(data)\n//  console.log(data)\n\n// window.io.sockets.emit('msg', 'ok'); \n//}\n\nwindow.CHAT_HANDLER = (data, socket)=>{\n  justShowResult(data, true)\n  socket.emit('msg', 'ok: '+data.length); \n}\n\nwindow.BROADCAST_HANDLER = data=>{\n  io.sockets.emit('broadcast', 'ok');\n}\nif(window.server){\n  \n  'server running';\n}else if(!window.server){\n  server =  require('http').createServer();\n  io = require('socket.io')(server);\n  server.listen(3000,'0.0.0.0'); \n   \n  io.sockets.on('connection', function(socket) {\n    jLog('somebody connected');\n    socket.on('msg',(d)=>window.CHAT_HANDLER(d,socket));\n    socket.on('broadcast',(d)=>window.BROADCAST_HANDLER(d,socket));\n    \n  });\n\n  'server start';\n}",
  "SEND_TO_LOCAL": "\n\ntimeout =1500;\n\n//ip = '159.224.183.122';\nip = '0.0.0.0'\n//ip = '192.168.0.100'\nif(!window.CHAT_SOCKET){\n  window.CHAT_SOCKET_PARSE = justShowResult;\n  CHAT_SOCKET = require('socket.io-client')('http://'+ip+':3000');\n  CHAT_SOCKET.on('msg', window.CHAT_SOCKET_PARSE)\n}\n\nCHAT_SOCKET.emit('msg', editor.getValue());\n\n;'con...'\n",
  "EVAL_REQUIRE_MAGIC": "\nmeta_pre_elem = document.querySelector('#meta_toolbar');\nrequire_override = function(mod_name){\n    arrreqfns.push({mod_name, \n                    file_path: require.resolve(mod_name)});\n    //let out = arrreqfns.map(v=>`${v.mod_name}: ${v.file_path}`).join('\\n');\n    let out = colf(arrreqfns);\n    meta_pre_elem.innerHTML = \n      `<pre class=\"result\"><code>REQUIRED MODULES:</code>\n\n<code>${out}</code></pre>`;\n    //console.log(arguments);\n    return require.apply(null,arguments);\n  }\nObject.assign(require_override, require);\n\nevalFN = function(code){\n  arrreqfns = [];\n  return (function(require){\n    return eval(code); \n  })(require_override);\n}\n\n",
  "showMarkdown": "\nmarked = require('marked');\n_MD_OUT = document.getElementById('composite');\n\nshowMarkdown = ()=>{\n  let mdtext = marked(editor.getValue());\n  _MD_OUT.innerHTML = `<div class=\"toolbar drag bar result\">\n<div class=\"select-text\">${mdtext}</div></div>`;\n  syncSizeLines();\n}\n\nif(arguments[1]){\n  arguments[1].classList.toggle('btn-default');\n  arguments[1].classList.toggle('btn-warning');\n}\n\nif(typeof resulttomin == 'undefined' || !resulttomin){\n  runCodeOverride = showMarkdown;\n  resulttomin = true\n  runCodeOverride()  \n}else{\n  runCodeOverride = false;\n  resulttomin = false;\n  _MD_OUT.innerHTML = '';\n  syncSizeLines();\n}\n\n",
  "EVAL_DNO": "\nmeta_pre_elem = document.querySelector('#meta_toolbar');\nzerolist = DNO.open('zerolist');\n\nrunDNO = function(){\n  \n  list = zerolist.rawData()\n  jLog(list)\n  \n  \n}\n\n\nif(arguments[1]){\n  arguments[1].classList.toggle('btn-default');\n  arguments[1].classList.toggle('btn-warning');\n}\n\nif(typeof resulttomin == 'undefined' || !resulttomin){\n  runCodeOverride = runDNO;\n  resulttomin = true\n  runCodeOverride()  \n}else{\n  runCodeOverride = false;\n  resulttomin = false;\n}\n\nmeta_pre_elem.innerHTML = \n  `<pre class=\"result\"><code>REQUIRED MODULES:</code>\n<code>${out}</code></pre>`;\n\n'fff'\n",
  "SAVE_ZERO": "\nzerolist = DNO.open('zerolist');\nkey = 'zero';\nzerolist.save(key, editor.getValue())\n\n\n",
  "DNO_LIST": "\n\nlet dno = DNO.open('dno');\ndno.db.find({ key: { $exists: true } })\n  .sort({key:1}).exec(function (err, docs) {\n  //justShowResult(_.zip(_(docs).pluck('key'),_(docs).pluck('source')).join('\\n--\\n'))\n\n  var list = _(docs).chain()\n  .map(function(v,k){\n    return `<button class=\"btn btn-mini btn-default act-choose\" data-key=\"${v.key}\">\n<span class=\"icon icon-down-open-mini\"></span> \n<span class=\"icon icon-text\"> ${v.key}</span>\n</button>`;})\n  .value().join('');\n\n  tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">${list}</div>`;  \n\n  el = $('#second_toolbar');\n  el.html(tpl);\n  el.find('.act-back').click(just.render);\n  el.find('.act-choose').click(function(e){\n    var nn = $(this).data('key');\n    if(nn && nn != ''){\n      just.setName(nn);\n      just.render()\n      dno.run('edit').catch(e=>String(e)).then(justShowResult);\n    }\n  });\n\n  justShowResult('done')\n});\n//Object.keys(kk)\n'wait'\n\n",
  "DNO_SAVE": "\n\nlet show = (data)=>{\n  let str = '<b style=\"color:orange;\">Saved DNO: dno: '+just.name+'</b>';\n  justShowResult(str, true)\n}\nif(just.name){\n  if(!isAutoRuned)\n    DNO.open('dno')\n      .save(just.name, editor.getValue())\n      .then(show);\n  \n}else{\n  just.run('add');\n}\n'wait'\n",
  "SEND_TESTLOCAL": "\n\ntimeout =1500;\n\nip = '192.168.0.101';\n\nif(!window.CHAT_SOCKET){\n  window.CHAT_SOCKET_PARSE = justShowResult;\n  CHAT_SOCKET = require('socket.io-client')('http://'+ip+':3000');\n  CHAT_SOCKET.on('msg', window.CHAT_SOCKET_PARSE)\n}\n\nCHAT_SOCKET.emit('msg', editor.getValue());\njustShowResult('Connected: '+CHAT_SOCKET.connected);\n;'con...'\n",
  "PDFCONV_SAVE": "\nlet show = (data)=>{\n  let str = '<b style=\"color:orange;\">Saved dno:pdfconv:'+just.name+'</b>';\n  justShowResult(str, true)\n}\nif(just.name){\n  if(!isAutoRuned)\n\t  DNO.open('pdfconv')\n      .save(just.name, editor.getValue())\n      .then();\n      \n}else{\n  just.run('add');\n}\n'wait'\n",
  "PDFCONV_LIST": "\n\nlet dno = DNO.open('pdfconv');\ndno.db.find({ key: { $exists: true } })\n  .sort({key:1}).exec(function (err, docs) {\n  //justShowResult(_.zip(_(docs).pluck('key'),_(docs).pluck('source')).join('\\n--\\n'))\n\n  var list = _(docs).chain()\n  .map(function(v,k){\n    return `<button class=\"btn btn-mini btn-default act-choose\" data-key=\"${v.key}\">\n<span class=\"icon icon-down-open-mini\"></span> \n<span class=\"icon icon-text\"> ${v.key}</span>\n</button>`;})\n  .value().join('');\n\n  tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">${list}</div>`;  \n\n  el = $('#second_toolbar');\n  el.html(tpl);\n  el.find('.act-back').click(just.render);\n  el.find('.act-choose').click(function(e){\n    var nn = $(this).data('key');\n    if(nn && nn != ''){\n      just.setName(nn);\n      just.render()\n      dno.findOne({key:just.name})\n        .then(v=>editor.setValue(v.source))\n        .then(justShowResult);\n    }\n  });\n\n  justShowResult('done')\n});\n//Object.keys(kk)\n'wait'\n\n",
  "COSMOS": "\n\nlet dno = DNO.open('cosmosid');\ndno.db.find({ key: { $exists: true } })\n  .sort({key:1}).exec(function (err, docs) {\n  //justShowResult(_.zip(_(docs).pluck('key'),_(docs).pluck('source')).join('\\n--\\n'))\n\n  var list = _(docs).chain()\n  .map(function(v,k){\n    return `<button class=\"btn btn-mini btn-default act-choose\" data-key=\"${v.key}\">\n<span class=\"icon icon-down-open-mini\"></span> \n<span class=\"icon icon-text\"> ${v.key}</span>\n</button>`;})\n  .value().join('');\n\n  tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">${list}</div>`;  \n\n  el = $('#second_toolbar');\n  el.html(tpl);\n  el.find('.act-back').click(just.render);\n  el.find('.act-choose').click(function(e){\n    var nn = $(this).data('key');\n    if(nn && nn != ''){\n      just.setName(nn);\n      just.render()\n      dno.run('edit').catch(e=>String(e)).then(justShowResult);\n    }\n  });\n\n  justShowResult('done')\n});\n//Object.keys(kk)\n'wait'\n\n",
  "COSMOS_SAVE": "\nlet show = (data)=>{\n  let str = '<b style=\"color:orange;\">Saved DNO:dno:'+just.name+'</b>';\n  justShowResult(str, true)\n}\nif(just.name){\n  if(!isAutoRuned)\n\t  DNO.open('cosmosid')\n      .save(just.name, editor.getValue());\n      //.then();\n      \n}else{\n  just.run('add');\n}\n'wait'",
  "ShowSavedSources": "\n\na = JSON.parse(localStorage.Knows)\n\no = a\n  .map((v,i)=>[i,v])\n  .filter(([i,v])=>v&&v.sourceText)\n  .map(([i,v])=>'#'+i+'\\n'+v.sourceText)\n\njustShowResult(o.join('\\n\\n------\\n\\n'))"
}